[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 regexcite authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tristan Contant. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Contant T (2023). regexcite: Make Regular Expressions Exciting. R package version 0.0.0.9000.","code":"@Manual{,   title = {regexcite: Make Regular Expressions More Exciting},   author = {Tristan Contant},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"regexcite","dir":"","previous_headings":"","what":"Make Regular Expressions More Exciting","title":"Make Regular Expressions More Exciting","text":"Example create package R","code":""},{"path":"/reference/str_split_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string — str_split_one","title":"Split a string — str_split_one","text":"Split string","code":""},{"path":"/reference/str_split_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string — str_split_one","text":"","code":"str_split_one(string, pattern, n = Inf)"},{"path":"/reference/str_split_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string — str_split_one","text":"string character vector , , one element. pattern Pattern look . default interpretation regular expression, described vignette(\"regular-expressions\"). Use regex() finer control matching behaviour. Match fixed string (.e. comparing bytes), using fixed(). fast, approximate. Generally, matching human text, want coll() respects character matching rules specified locale. Match character, word, line sentence boundaries boundary(). empty pattern, \"\", equivalent boundary(\"character\"). n Maximum number pieces return. Default (Inf) uses possible split positions. split_split(), determines maximum length element output. str_split_fixed(), determines number columns output; input short, result padded \"\".","code":""},{"path":"/reference/str_split_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string — str_split_one","text":"character vector.","code":""},{"path":"/reference/str_split_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string — str_split_one","text":"","code":"x <- \"alfa,bravo,charlie,delta\" str_split_one(x, pattern = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\"   str_split_one(x, pattern = \",\", n = 2) #> [1] \"alfa\"                \"bravo,charlie,delta\"  y <- \"192.168.0.1\" str_split_one(y, pattern = stringr::fixed(\".\")) #> [1] \"192\" \"168\" \"0\"   \"1\""},{"path":"/reference/strsplit1.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a string — strsplit1","title":"Split a string — strsplit1","text":"Split string","code":""},{"path":"/reference/strsplit1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a string — strsplit1","text":"","code":"strsplit1(x, split)"},{"path":"/reference/strsplit1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a string — strsplit1","text":"x character vector one element. split split .","code":""},{"path":"/reference/strsplit1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a string — strsplit1","text":"character vector.","code":""},{"path":"/reference/strsplit1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a string — strsplit1","text":"","code":"x <- \"alfa,bravo,charlie,delta\" strsplit1(x, split = \",\") #> [1] \"alfa\"    \"bravo\"   \"charlie\" \"delta\""}]
